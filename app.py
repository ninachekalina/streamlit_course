import streamlit as st
import datetime
import json
from pages.backend import rag_functions
#from pages.backend.rag_functions import prepare_rag_llm, load_csv_as_context, generate_cql_query, generate_answer, \
    #generate_sql_query, generate_quiz_from_retriever
from pages/backend.rag_functions import prepare_rag_llm, load_csv_as_context, generate_cql_query, generate_answer, \
    generate_sql_query, generate_quiz_from_retriever

st.title("üéì AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç + –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤")

if "chat_history" not in st.session_state:
    st.session_state.chat_history = []
st.sidebar.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏")
temperature = st.sidebar.slider("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å)", min_value=0.0, max_value=1.5, value=0.7, step=0.1)

if "conversation" not in st.session_state:
    token = st.text_input("üîë –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á GigaChat:", type="password")
    if token:
        st.session_state.conversation, st.session_state.llm,st.session_state.retriever = prepare_rag_llm(
            token=token,
            model="GigaChat:latest",
            embeddings_name="sentence-transformers/all-MiniLM-L6-v2",
            vector_store_path="vector_store/tech_big",
            temperature=temperature,
            max_length=2000,
        )
st.subheader("üí¨ –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π")
user_input = st.text_input("–í–æ–ø—Ä–æ—Å")
if st.button("–û—Ç–≤–µ—Ç–∏—Ç—å") and user_input:
    with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞..."):
        answer, _ = generate_answer(user_input)
        st.write(answer)
        st.markdown("---")
        st.subheader("üïò –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞")

        for msg in st.session_state.chat_history:
            if msg["role"] == "user":
                st.markdown(f"**–í—ã:** {msg['message']}")
            else:
                st.markdown(f"**–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:** {msg['message']}")
if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"):
    st.session_state.chat_history = []

st.subheader("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏")

# –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
save_format = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏", ["JSON", "TXT"])

if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"):
    if "chat_history" not in st.session_state or not st.session_state.chat_history:
        st.warning("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –ø—É—Å—Ç–∞.")
    else:
        now = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")

        if save_format == "JSON":
            filename = f"chat_history_{now}.json"
            with open(filename, "w", encoding="utf-8") as f:
                json.dump(st.session_state.chat_history, f, ensure_ascii=False, indent=2)
        else:  # TXT
            filename = f"chat_history_{now}.txt"
            with open(filename, "w", encoding="utf-8") as f:
                for msg in st.session_state.chat_history:
                    role = "–í—ã" if msg["role"] == "user" else "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"
                    f.write(f"{role}: {msg['message']}\n\n")

        st.success(f"–ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ `{filename}`")


# ======== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è CQL –∏ SQL ========
st.subheader("üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –æ–±—É—á–∞—é—â–∏–º –¥–∞—Ç–∞—Å–µ—Ç–∞–º")

col1, col2 = st.columns([1, 1])

csv_path = st.text_input("–ü—É—Ç—å –∫ CSV-—Ñ–∞–π–ª—É", "vector_store/tech_big/russian_demography.csv")
instruction = st.text_area("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É –æ –Ω–∞—Å–µ–ª–µ–Ω–∏–∏ –ú–æ—Å–∫–≤—ã –∑–∞ 2020 –≥–æ–¥')")

with col1:
    if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å CQL"):
        try:
            context = load_csv_as_context(csv_path)
            llm = st.session_state.llm
            cql_query = generate_cql_query(llm, instruction, context)
            st.code(cql_query, language='sql')
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ CQL: {str(e)}")

with col2:
    if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å SQL"):
        try:
            context = load_csv_as_context(csv_path)
            llm = st.session_state.llm
            sql_query = generate_sql_query(llm, instruction, context)
            st.code(sql_query, language='sql')
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL: {str(e)}")


# ======== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞ ========
st.subheader("üìö –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π")

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
if st.button("üìö –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç"):
    with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤..."):
        try:
            quiz_text = generate_quiz_from_retriever(st.session_state.llm, st.session_state.retriever)
            if quiz_text and isinstance(quiz_text, str) and quiz_text.strip():
                # –£–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã
                cleaned_quiz = "\n".join(
                    line for line in quiz_text.splitlines()
                    if not line.strip().lower().startswith("–æ—Ç–≤–µ—Ç")
                )
                st.session_state.generated_quiz_full = quiz_text  # –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –æ—Ç–≤–µ—Ç–∞–º–∏
                st.session_state.generated_quiz = cleaned_quiz     # –ë–µ–∑ –æ—Ç–≤–µ—Ç–æ–≤
                st.session_state.show_answers = False
                st.success("–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
            else:
                st.warning("–ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {e}")

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –±–µ–∑ –æ—Ç–≤–µ—Ç–æ–≤
if "generated_quiz" in st.session_state and st.session_state.generated_quiz:
    st.text_area("üìÑ –¢–µ—Å—Ç (–±–µ–∑ –æ—Ç–≤–µ—Ç–æ–≤)", value=st.session_state.generated_quiz, height=400)

    # –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç—ã
    #if st.button("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç—ã"):
      #  st.session_state.show_answers = True

    # –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
 #   if st.session_state.get("show_answers", False):
    #    st.text_area("üü¢ –¢–µ—Å—Ç —Å –æ—Ç–≤–µ—Ç–∞–º–∏", value=st.session_state.generated_quiz_full, height=400)

    # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
    st.download_button(
        label="üíæ –°–∫–∞—á–∞—Ç—å —Ç–µ—Å—Ç —Å –æ—Ç–≤–µ—Ç–∞–º–∏",
        data=st.session_state.generated_quiz_full,
        file_name="quiz_with_answers.txt",
        mime="text/plain"
    )
